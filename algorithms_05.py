import sys
import math
import numpy as np

def profile(motifs):
    k = len(motifs[0])
    n = len(motifs)
    s = 1 / n
    seq1 = 'ACGTacgt01230123'
    seq_dict = { seq1[i]:int(seq1[i+8]) for i in range(8) }
    P = [[0 for _ in range(k)] for __ in range(4)]
    for motif in motifs:
        for i in range(k):
            P[seq_dict[motif[i]]][i] += s
    return P

def pseudoprofile(motifs):
    k = len(motifs[0])
    n = len(motifs)
    s = 1 / (n + 4)
    seq1 = 'ACGTacgt01230123'
    seq_dict = { seq1[i]:int(seq1[i+8]) for i in range(8) }
    P = [[1 for _ in range(k)] for __ in range(4)]
    for motif in motifs:
        for i in range(k):
            P[seq_dict[motif[i]]][i] += s
    return P


def consensus(motifs):
    P = profile(motifs)
    k = len(P[0])
    Pt = [[row[i] for row in P] for i in range(k)]
    seq_dict = ['A', 'C', 'G', 'T']
    return ''.join([seq_dict[np.argmax(Pt[i])] for i in range(k)])

def score(motifs):
    k = len(motifs[0])
    n = len(motifs)
    seq1 = 'ACGTacgt01230123'
    seq_dict = { seq1[i]:int(seq1[i+8]) for i in range(8) }
    P = [[0 for _ in range(4)] for __ in range(k)]
    for motif in motifs:
        for i in range(k):
            P[i][seq_dict[motif[i]]] += 1
    Sm = 0
    for i in range(k):
        Sm += max(P[i])
    return n * k - Sm

def count(motifs):
    k = len(motifs[0])
    n = len(motifs)
    seq1 = 'ACGTacgt01230123'
    seq_dict = { seq1[i]:int(seq1[i+8]) for i in range(8) }
    P = [[0 for _ in range(k)] for __ in range(4)]
    for motif in motifs:
        for i in range(k):
            P[seq_dict[motif[i]]][i] += 1
    return P

def pr(pattern, profile):
    seq1 = 'ACGTacgt01230123'
    seq_dict = { seq1[i]:int(seq1[i+8]) for i in range(8) }
    p = 1
    k = len(pattern)
    for i in range(k):
        p *= profile[seq_dict[pattern[i]]][i]
    return p

def profile_most_pr_kmer(seq, k, profile):
    l = len(seq)
    pmax = -1
    imax = -1
    for i in range(l-k+1):
        p = pr(seq[i:i+k], profile)
        if p > pmax:
            pmax = p
            imax = i
    return seq[imax:imax+k]

def greedy_motif_search(dna, k, t):
    BestMotifs = [dna[i][0:k] for i in range(t)]
    Bestscore = float('inf')
    dna1 = dna[0]
    l1 = len(dna1)
    for i in range(l1-k+1):
        motifs = []
        motifs.append(dna1[i:i+k])
        for i in range(1, t):
            P = profile(motifs)
            motifs.append(profile_most_pr_kmer(dna[i], k, P))
        currscore = score(motifs)
        if currscore < Bestscore:
            BestMotifs = motifs
            Bestscore = currscore
    return BestMotifs

def greedy_motif_search_2(dna, k, t):
    #greedy_motif_search with pseudocounts
    BestMotifs = [dna[i][0:k] for i in range(t)]
    Bestscore = float('inf')
    dna1 = dna[0]
    l1 = len(dna1)
    for i in range(l1-k+1):
        motifs = []
        motifs.append(dna1[i:i+k])
        for i in range(1, t):
            P = pseudoprofile(motifs)
            motifs.append(profile_most_pr_kmer(dna[i], k, P))
        currscore = score(motifs)
        if currscore < Bestscore:
            BestMotifs = motifs
            Bestscore = currscore
    return BestMotifs 


dna="GATCCGAGACTCAGGAAAGCCACCTTGAGACGGCTGTAAAACACGATTCGCGTCGCGTAGTTATGCTTGGGCGGTGTATGATCGGAAACTCACATCCTTAAGGAATCGGGTATACGCACTCAGGGATGCAGTCAAAACTCGGGAGGAGCACCATACGAACGTTAATGCTTCACCACGGTTTGCTGCCGGCGACAACCGCCGGCGAGTCCTGGGCTGTGTCCTGAGACCATGCTCTAGTAAACGACAGCCACTGTGGAAACATTCGCCGCGTCCTGGAAGGCGCTATTCAGTTGCTGCTAGCCGAGCAAGTCGTACTTATTTTTGCTGACATAATGTCACGGAAACCTAATCTGGACCAGCGCCCGAAAAATTATCAAGCTTTCAGAGCGAGGCTCCACGAGAGCCACTCGTCGGCACGTGCCTGGGGTGTAATCTAAGCCAGGTTAGATCATTGGTGTGTTGGACACGGACTCTATTTTAGTGCGGGTGAGGAACACAGACGTGCTCAAGGGGGTAATGGAAGCCACACACCAGCGTCAAATACGGTCCGACATAGCTGCCCGTGCGAAACCACCATATCTCCGCTACGTCGCAGGTCAGGGTTTCTATATCTGTAGTACGTGGGCCGTGGCTAAATATCCATCTCGGTTGGTACCCTCACGCTTCGCATGACACGCTGTACACGAACGTAAATGAACGACAGCCACGTCTAGAAGTAAGCTGAGGTAAGACGGTGTCTTGATTTGAGGTCTTCCGTGACAGGGCCGCTACATAATTGCAGATTAAGGATCTTCAACCTTACGGTGATCGCGGAATGAGGCAAAATAGGAACACCACTCATTCCGGGCGAGATGACGAAACTTTTCGACTGTAATGTGCTTCCTTCGCTCCACCGGGGGAGTCGATTTCGATTAGCACTCGTCCACGATAGCCACTCTGAGGCTTGTGCAGGGGAGACTTTAACTGACGGACTTATAGACCTAACAACGTGGCAGCCATCAAGATCTGCAAAGGGAACCTACGAGAGCCACGGAACACGCGAACATTTAGTTCTTGAGAAGCAGACTGCACAACAGAAGTGGCACAGAGTTACGGGATGTTCTTTTGGTGCGGCATTAATCTCACACTTAAGGTAACCTGCTGTAGTAGTTAGCCTTTATGTTCTATGCTCGATACCCCACTTCCCTAGAGTGACAAGGCAATTGAACACACAGCTTGCCACTCGAAAGTTAGACAAGGGAAGCCACGGTACCCGCGGCTTACGGTTTTGCACCATTCCTCGCGGGGTCCTTCCCGCGACTAGCGCGACCATGCAACGGGAAGGCAGCCACGTACAGGTGCTTTATCTGAAGCCAGCAGCGAGATTGCTCAGGGCGCGTCGTACGCAGCACGCACGCAGGCGCAAGCCTTGGCGGAGGAGGGTGCACAAATAGTACGGAACTGGAGGAAAGTACTGAAAGGATGAAGCTGGAAGCGGATGTTCTGCTAATGTCAGCCACGCCTGTGTAAATACGCTTCGAAAAGCCAGGGCGGGGGTAGTCTAGGTATTGGGAGCTCCGGACCTGTGGTTCGGCTTGCCGGAGAGAGACATGGAATAAGGGAGCCACTCCAAACAGTCGCCGTGATTACCACTGTCAAGTACATGAGTAAAGGGCGTGTACTAAGGTGCGGCCGCGGGGCAGGAATCTAATCCCTATGCCCTAGTAAATTACGTTAACGCCAGCCACTGCATCACCGCTAACCCGGGATGTGAACCGCATTGACCTTTAGCCCGCCCGGCCCTCGACACGAACAGCGAGAAACACTGCGGCTAAGTCTGTGCGATCGTCTATGTGCAATATCATGCTCACCCGGGTGCTCCGGGTCTAAATTGATACAGCGCGCGCGCGTGCTGGCACGTTAGCCACAGGGTGGCGGTCGTTGAGACAACAGTATAGGTCCGGTTCACTCCCAGTGAGTGTTAACGCCAGTGCCCACAGACCGTCATGCCGTCACTTAAAGGGGCCCTGAGCGGACTAAGTCTAGATTGTGAGGGTGCCTCGCACTCAGGTCCAAGCCGGACTAAGGGCAGCCACCTCTCCTGTTGACTTTTGTAATTACAGCTCAGCGCGCTAAGCCCAATTCAATTTCAGTATCCACGGTGCGGTACGTCAAGTATGTGCCGGATGCTGCGTAGACCCTTTGCGCCTCGGATTTAAACTTTATTAAAGGACATCCCCATGTGCAAAATAACTACGCAGCGAAATACAGTTACCAGCTCACAGAATCACGCCTCGGAATTCTTGAAAAGTAAAATTTAAACTGATGATAGCCACGCTAAGAGTCGGAGCTGGTTTACGTCCGACACACGGTTCAGTGCACCCATGCACACTCTGCGGTTTCCTGACGACCCACGAACTTTTTTCAAATGTCTAGGCAGCAAGCAAGCCAGCCACGACATCCGATAAGGGACTAGCTGACGACCGCCCCGAGAGCTTTGGGCGCAACATGTCGCGTGTTGAAAGCCACTTCCAACTCTAAACACCAGCTGGCAGATCCGCACTGCCGGGATGTCCAACTTGCTAACGTATCGGAGCCACCTCTCTACGTGCTCTATAAGTGTGTTTATGTGGAGACTATCCTCCGAATAGGTAAGCCACAGATTTGACAATGTAAGTTTTGTGAACAATAACTAAGATAGAATTAAGGCCGTGGCTATTGACGTAAGCCACGGCCGTTGCTGTGAATTGGTATTGGGCGATCATAACATTCCTGTTCAGCATTAAACCGTCTAATCGATGTGATAGTACAGATCCTTTGCGTGTCAACTGGTTCTAACCGCCTCTGTTGTTCGAAGTAACACTGTTCAAACGAATGCTTATTAGGCTAAAAGAGCGGACGACCCGGCTACTGCTTGTCACCTGCCGAGAGATCTAATCTTGAGTAGGCATGACCCTTCATAGGTTAGCCACTATCGCTCTGGCGCGTAGTTAAAGCCGACCGCACGGCATGCAAGCCACAATCAGGCCCGTTCGACAGTGAGTCGGGGGACGGTCCAGGCACGGTGTCGGTGAAGCAGGCCTCAGGACTCTCAGCGGCCAATAGTATCCGTCGGTCGCCATAGATTACAAACGTATTCACTGACTGAACGTAGAAATTTTTAACCAGCGTTGCTCGGAGTACATGACATCTTAGCGCAGCCCGTCTGAAACCATTGACAACAACCCAGGGGCCGGCGAATCTAACTATATGCCAGCCACAGGGTCCCCTCGGTCAGCCATTTGCACGTCGTAATATAGGGTCATCGTAAAGTAAGCCACGGAACACTGATGACAACCAGCCCCAATCCAGAATCTTAACCCTATGAGGTAATTTCTGACTTGACTGATCCCTTTTACCTAGCTTACCAGGTTCCCCGATGGTACCCCAGTCACTGTGGCTCGATGCTTTCTATGTGCGAAACTCTGTTGATATGGCAACGCTCCTCTGCCTAGCAACGAGTCGTCTCGCGCCGAACAGTAAAGGATATAGACAGGCTGTACCCTAGATATGACAGCCACCATTTTGCGTGACGTCATCTGTCAACCGACGTTAGATGTGCTTCACTAAAGTAAGTGGCGTACTGCCACAAGCAAGATAGCCACCTCCGCACCCCCGTTCATCGTTTCGGAAGCTTTATAGTTTGAAGCCACTTAACGGTCCGAACCGAAGGCGACCCGCGACGTGATAGTTACCGCGTTATAGGCGTCTGGCGTAGCAGGCTCGTGAACGGCGCCAATGGCATGGAGAAATTGTGGCTCACTCCCGGTGAGGGCATCACCGCCGTATAACCACGGCCCGTTACAGTACCAAAAACAGCATAAGCTAGCCACTTCAGGTCTGAGAGTCTCCGCTTGGATTGTGGCACAGCTTCGCTTCGCC"

k=12
t=25
print(greedy_motif_search(dna,k,t))
